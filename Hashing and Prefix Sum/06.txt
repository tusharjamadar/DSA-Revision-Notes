// Java Program to implement
// the above approach
import java.util.*;
public class Main {

// Function to find the Smallest Subarray with Sum
// K from an Array
static int smallestSubarraySumK(int arr[], int n, int K)
{
	// Use map here to store the prefixSum ending
	// at ith index.
	HashMap<Integer,
	Integer> mp = new HashMap<Integer,
	Integer>();

	// Store the current Prefix sum till ith
	// index;
	int currPrefixSum = 0;

	// Store the minimum size subarray whose
	// sum is K
	int result = Integer.MAX_VALUE;

	for(int i = 0; i < n; i++){
		currPrefixSum += arr[i];

		// Check if the current prefix sum is
		// equals to K
		if(currPrefixSum == K){
			int currLen = i + 1;
			result = Math.min(result, currLen);
		}

		// Required PrefixSum
		int requirePrefixSum = currPrefixSum - K;

		// Check if there exist any required Prefix Sum or not
		if(mp.containsKey(requirePrefixSum)){
			int foundIdx = mp.get(requirePrefixSum);
			int currIdx = i;

			result = Math.min(result, currIdx 
								- foundIdx);
		}
		
		// Store the current prefix sum ending at i
		mp.put(currPrefixSum, i);
	}

	if(result >= Integer.MAX_VALUE) return -1;
	
	// return the result
	return result;
}

// Driver Code
public static void main(String[] args){

	int arr[] = {-8, -8, -3, 8};
	int n = arr.length;
	int K = 5;

	System.out.println(smallestSubarraySumK(arr,
											n, K));
	
	}
}
